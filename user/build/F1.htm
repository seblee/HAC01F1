<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\F1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\F1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Jan 15 11:13:52 2021
<BR><P>
<H3>Maximum Stack Usage =        340 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; reg_map_write &rArr; eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[fc]">os_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">os_error</a><BR>
 <LI><a href="#[1c]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[41]">os_idle_demon</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">os_idle_demon</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_COMP_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[2c]">CEC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[15]">EXTI0_1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[16]">EXTI2_3_IRQHandler</a> from phasecutting.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[17]">EXTI4_15_IRQHandler</a> from phasecutting.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[26]">I2C1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[27]">I2C2_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[11]">PVD_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[12]">RTC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[47]">Reset_Handler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[28]">SPI1_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[29]">SPI2_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from hal_cm0.o(.emb_text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[2f]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f051.o(.text)
 <LI><a href="#[22]">TIM14_IRQHandler</a> from phasecutting.o(i.TIM14_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[23]">TIM15_IRQHandler</a> from phasecutting.o(i.TIM15_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[24]">TIM16_IRQHandler</a> from phasecutting.o(i.TIM16_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[25]">TIM17_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1d]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1e]">TIM1_CC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[1f]">TIM2_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[20]">TIM3_IRQHandler</a> from porttimer.o(i.TIM3_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[21]">TIM6_DAC_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[18]">TS_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[2a]">USART1_IRQHandler</a> from portserial.o(i.USART1_IRQHandler) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[2b]">USART2_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f051.o(.text) referenced from startup_stm32f051.o(RESET)
 <LI><a href="#[30]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f051.o(.text)
 <LI><a href="#[1]">acl00</a> from alarm_calc.o(i.acl00) referenced 2 times from alarm_calc.o(.data)
 <LI><a href="#[2]">acl01</a> from alarm_calc.o(i.acl01) referenced 2 times from alarm_calc.o(.data)
 <LI><a href="#[3]">acl02</a> from alarm_calc.o(i.acl02) referenced 2 times from alarm_calc.o(.data)
 <LI><a href="#[4]">acl03</a> from alarm_calc.o(i.acl03) referenced 2 times from alarm_calc.o(.data)
 <LI><a href="#[45]">bkg_proc</a> from bkg_proc.o(i.bkg_proc) referenced from main.o(.constdata)
 <LI><a href="#[44]">com_proc</a> from com_proc.o(i.com_proc) referenced from main.o(.constdata)
 <LI><a href="#[43]">core_proc</a> from core_proc.o(i.core_proc) referenced from main.o(.constdata)
 <LI><a href="#[5]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[8]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[7]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[6]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[34]">eMBRTUReceive</a> from mbrtu.o(i.eMBRTUReceive) referenced from mb.o(i.eMBInit)
 <LI><a href="#[33]">eMBRTUSend</a> from mbrtu.o(i.eMBRTUSend) referenced from mb.o(i.eMBInit)
 <LI><a href="#[31]">eMBRTUStart</a> from mbrtu.o(i.eMBRTUStart) referenced from mb.o(i.eMBInit)
 <LI><a href="#[32]">eMBRTUStop</a> from mbrtu.o(i.eMBRTUStop) referenced from mb.o(i.eMBInit)
 <LI><a href="#[46]">fan_com_chk</a> from global_var.o(i.fan_com_chk) referenced from global_var.o(.constdata)
 <LI><a href="#[9]">main</a> from main.o(i.main) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[42]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[41]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[2d]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm0.o(.emb_text)
 <LI><a href="#[2e]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm0.o(.emb_text)
 <LI><a href="#[38]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[39]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[3a]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[3c]">svcPoolCreate</a> from rt_cmsis.o(i.svcPoolCreate) referenced from rt_cmsis.o(i.osPoolCreate)
 <LI><a href="#[3e]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[3f]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[40]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[3b]">sysPoolAlloc</a> from rt_cmsis.o(i.sysPoolAlloc) referenced from rt_cmsis.o(i.osPoolAlloc)
 <LI><a href="#[3d]">sysPoolFree</a> from rt_cmsis.o(i.sysPoolFree) referenced from rt_cmsis.o(i.osPoolFree)
 <LI><a href="#[35]">xMBRTUReceiveFSM</a> from mbrtu.o(i.xMBRTUReceiveFSM) referenced from mb.o(i.eMBInit)
 <LI><a href="#[37]">xMBRTUTimerT35Expired</a> from mbrtu.o(i.xMBRTUTimerT35Expired) referenced from mb.o(i.eMBInit)
 <LI><a href="#[36]">xMBRTUTransmitFSM</a> from mbrtu.o(i.xMBRTUTransmitFSM) referenced from mb.o(i.eMBInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[133]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[134]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[135]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[136]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4a]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[137]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[11a]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[138]"></a>os_set_env</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[139]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[13a]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)

<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm0.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[47]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))

<P><STRONG><a name="[1c]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_hi_press_ai
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecTimeGap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrSec
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSCRTrigOnCntrl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCalPhaseCuttingTime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateVout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MedianFilter
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVGfilter2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ntc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_hi_press_ai
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecTimeGap
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateVout
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAngleByVout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVGfilter
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_alrarm_cnt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_delete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_append
</UL>

<P><STRONG><a name="[13d]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_delete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_append
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chain_init
</UL>

<P><STRONG><a name="[13f]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[cf]"></a>ADC_ClockModeConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_ClockModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d6]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d5]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d4]"></a>ADC_DMARequestModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_DMARequestModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[56]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[58]"></a>ADC_Filter2</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, daq.o(i.ADC_Filter2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADC_Filter2 &rArr; MedianFilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MedianFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_sts_update
</UL>

<P><STRONG><a name="[d3]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d7]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d1]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d8]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d0]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[5a]"></a>AVGfilter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, acfrequency.o(i.AVGfilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AVGfilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubble_sort
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetAcCyc
</UL>

<P><STRONG><a name="[5c]"></a>AVGfilter2</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, daq.o(i.AVGfilter2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AVGfilter2 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubble_sort
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_sts_update
</UL>

<P><STRONG><a name="[5d]"></a>CalculateAngleByVout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fanctrl.o(i.CalculateAngleByVout))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CalculateAngleByVout &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlAlgorithm
</UL>

<P><STRONG><a name="[5e]"></a>CalculatePressurePoint</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, fanctrl.o(i.CalculatePressurePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalculatePressurePoint
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlAlgorithm
</UL>

<P><STRONG><a name="[60]"></a>CalculateVout</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, fanctrl.o(i.CalculateVout))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CalculateVout &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanStartSwitch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanOutError
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlAlgorithm
</UL>

<P><STRONG><a name="[cb]"></a>ChkACFrequency</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, acfrequency.o(i.ChkACFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChkACFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_proc
</UL>

<P><STRONG><a name="[63]"></a>DI_update</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dio.o(i.DI_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DI_update
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[dd]"></a>DMA_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[db]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[d9]"></a>DMA_DeInit</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[dc]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[da]"></a>DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f0xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
</UL>

<P><STRONG><a name="[65]"></a>DisableT0</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phasecutting.o(i.DisableT0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableT0
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
</UL>

<P><STRONG><a name="[6a]"></a>DisableT1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phasecutting.o(i.DisableT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableT1
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
</UL>

<P><STRONG><a name="[16]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, phasecutting.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EXTI2_3_IRQHandler &rArr; vGetAcCyc &rArr; AVGfilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnablePhaseAngleTiming
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetAcCyc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, phasecutting.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EXTI4_15_IRQHandler &rArr; vGetAcCyc &rArr; AVGfilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetAcCyc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>EXTI_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f0xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT1
</UL>

<P><STRONG><a name="[6f]"></a>FanCtrlAlgorithm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fanctrl.o(i.FanCtrlAlgorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FanCtrlAlgorithm &rArr; CalculateVout &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCalPhaseCuttingTime
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxPressureVal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateVout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatePressurePoint
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateAngleByVout
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_proc
</UL>

<P><STRONG><a name="[72]"></a>FanCtrlStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fanctrl.o(i.FanCtrlStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FanCtrlStatus &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[61]"></a>FanOutError</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fanctrl.o(i.FanOutError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FanOutError
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alarm_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateVout
</UL>

<P><STRONG><a name="[62]"></a>FanStartSwitch</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fanctrl.o(i.FanStartSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateVout
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dio_bsp_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_gpio_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCR_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[128]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_gpio_init
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DI_update
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[f7]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>

<P><STRONG><a name="[79]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_gpio_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCRON
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCROFF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCR_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
</UL>

<P><STRONG><a name="[75]"></a>GetCurrSec</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lib.o(i.GetCurrSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetCurrSec &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[70]"></a>GetMaxPressureVal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fanctrl.o(i.GetMaxPressureVal))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlAlgorithm
</UL>

<P><STRONG><a name="[76]"></a>GetSecTimeGap</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib.o(i.GetSecTimeGap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetSecTimeGap &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C_EE_BufRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_bsp.o(i.I2C_EE_BufRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_EE_BufRead &rArr; I2C_EE_BufRead_bsp &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_conf_reg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_compare_read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_load_factory_conf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_singel_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
</UL>

<P><STRONG><a name="[78]"></a>I2C_EE_BufRead_bsp</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, i2c_bsp.o(i.I2C_EE_BufRead_bsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_EE_BufRead_bsp &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead
</UL>

<P><STRONG><a name="[81]"></a>I2C_EE_BufWrite</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_bsp.o(i.I2C_EE_BufWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite_bsp
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_load_flag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_conf_reg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_tripple_write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_singel_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[82]"></a>I2C_EE_BufWrite_bsp</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, i2c_bsp.o(i.I2C_EE_BufWrite_bsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite
</UL>

<P><STRONG><a name="[b9]"></a>IWDG_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[b8]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[b6]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[b7]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[b5]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[88]"></a>InitEXINT1</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, phasecutting.o(i.InitEXINT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitEXINT1 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFanCtrl
</UL>

<P><STRONG><a name="[8f]"></a>InitEXINT2</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, phasecutting.o(i.InitEXINT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitEXINT2 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFanCtrl
</UL>

<P><STRONG><a name="[90]"></a>InitFanCtrl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fanctrl.o(i.InitFanCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = InitFanCtrl &rArr; InitEXINT2 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCR_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT1
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>InitT0</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, phasecutting.o(i.InitT0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitT0 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT0
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFanCtrl
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>InitT1</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, phasecutting.o(i.InitT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitT1 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT1
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFanCtrl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnablePhaseAngleTiming
</UL>

<P><STRONG><a name="[94]"></a>InitT2</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, phasecutting.o(i.InitT2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InitT2 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFanCtrl
</UL>

<P><STRONG><a name="[59]"></a>MedianFilter</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, calc.o(i.MedianFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MedianFilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Filter2
</UL>

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT1
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[97]"></a>PaSCROFF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phasecutting.o(i.PaSCROFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PaSCROFF
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSCRTrigOffCntrl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCalPhaseCuttingTime
</UL>

<P><STRONG><a name="[98]"></a>PaSCRON</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phasecutting.o(i.PaSCRON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PaSCRON
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSCRTrigOnCntrl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEnablePhaseAngleTiming
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCalPhaseCuttingTime
</UL>

<P><STRONG><a name="[91]"></a>PaSCR_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, phasecutting.o(i.PaSCR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PaSCR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFanCtrl
</UL>

<P><STRONG><a name="[5f]"></a>PraMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fanctrl.o(i.PraMode))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatePressurePoint
</UL>

<P><STRONG><a name="[89]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dio_bsp_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_gpio_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCR_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT1
</UL>

<P><STRONG><a name="[95]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[8b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT1
</UL>

<P><STRONG><a name="[57]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[99]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[8c]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEXINT1
</UL>

<P><STRONG><a name="[2f]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>Systime_cal</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bkg_proc.o(i.Systime_cal))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[22]"></a>TIM14_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, phasecutting.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM14_IRQHandler &rArr; InitT0 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSCRTrigOnCntrl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT0
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM15_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, phasecutting.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM15_IRQHandler &rArr; InitT0 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSCRTrigOnCntrl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM16_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, phasecutting.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM16_IRQHandler &rArr; vSCRTrigOffCntrl &rArr; PaSCROFF
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateExtISRFltTm
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSCRTrigOffCntrl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateAcCyc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, porttimer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT0
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[69]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT0
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[9b]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT0
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[68]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableT0
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[96]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT0
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[a1]"></a>TimeTask</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lib.o(i.TimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimeTask &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[2a]"></a>USART1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, portserial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[12d]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[a2]"></a>USART_GetITStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>USART_ITConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>

<P><STRONG><a name="[a4]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[12f]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>

<P><STRONG><a name="[131]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
</UL>

<P><STRONG><a name="[83]"></a>WriteEEROMPage</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, i2c_bsp.o(i.WriteEEROMPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite_bsp
</UL>

<P><STRONG><a name="[f9]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mb_cb.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_baudrate
</UL>

<P><STRONG><a name="[144]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[145]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[146]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[113]"></a>_init_box</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
</UL>

<P><STRONG><a name="[a9]"></a>add_alarmlog_fifo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, event_record.o(i.add_alarmlog_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe
</UL>

<P><STRONG><a name="[a5]"></a>ai_sts_update</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, daq.o(i.ai_sts_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ai_sts_update &rArr; ADC_Filter2 &rArr; MedianFilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVGfilter2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Filter2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ntc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_hi_press_ai
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daq_gvar_update
</UL>

<P><STRONG><a name="[a8]"></a>alarm_acl_exe</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, alarm_calc.o(i.alarm_acl_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alarm_acl_exe &rArr; node_delete &rArr; calc_alrarm_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_delete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_append
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_alarmlog_fifo
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_status_bitmap_op
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe_process
</UL>

<P><STRONG><a name="[ad]"></a>alarm_acl_exe_process</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, alarm_calc.o(i.alarm_acl_exe_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = alarm_acl_exe_process &rArr; alarm_acl_exe &rArr; node_delete &rArr; calc_alrarm_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_arbiration
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[af]"></a>alarm_acl_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, alarm_calc.o(i.alarm_acl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alarm_acl_init &rArr; chain_init &rArr; osPoolCreate &rArr; svcPoolCreate &rArr; _init_box
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chain_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[c0]"></a>bin_search</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, calc.o(i.bin_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bin_search
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_ntc
</UL>

<P><STRONG><a name="[45]"></a>bkg_proc</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, bkg_proc.o(i.bkg_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bkg_proc &rArr; daq_gvar_update &rArr; ai_sts_update &rArr; ADC_Filter2 &rArr; MedianFilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daq_gvar_update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe_process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeTask
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DI_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systime_cal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>bubble_sort</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, calc.o(i.bubble_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bubble_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVGfilter2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVGfilter
</UL>

<P><STRONG><a name="[b0]"></a>chain_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, event_record.o(i.chain_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chain_init &rArr; osPoolCreate &rArr; svcPoolCreate &rArr; _init_box
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_init
</UL>

<P><STRONG><a name="[f1]"></a>checksum_u16</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, calc.o(i.checksum_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checksum_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_conf_reg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_load_factory_conf
</UL>

<P><STRONG><a name="[44]"></a>com_proc</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, com_proc.o(i.com_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = com_proc &rArr; change_surv_baudrate &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_device_addr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_baudrate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecTimeGap
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_surv_baudrate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrSec
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>core_proc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, core_proc.o(i.core_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = core_proc &rArr; FanCtrlAlgorithm &rArr; CalculateVout &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrSec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlAlgorithm
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkACFrequency
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>daq_gvar_update</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, daq.o(i.daq_gvar_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = daq_gvar_update &rArr; ai_sts_update &rArr; ADC_Filter2 &rArr; MedianFilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_sts_update
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[cc]"></a>do_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dio.o(i.do_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = do_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dio_bsp_init
</UL>

<P><STRONG><a name="[ce]"></a>drv_adc_dma_init</STRONG> (Thumb, 236 bytes, Stack size 88 bytes, adc.o(i.drv_adc_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = drv_adc_dma_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestModeConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClockModeConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>drv_dio_bsp_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, dio.o(i.drv_dio_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_dio_bsp_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dio_init
</UL>

<P><STRONG><a name="[df]"></a>drv_dio_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dio.o(i.drv_dio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = drv_dio_init &rArr; drv_dio_bsp_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dio_bsp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>drv_i2c_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, i2c_bsp.o(i.drv_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = drv_i2c_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>eMBEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_surv_baudrate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[5]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB &rArr; reg_map_write &rArr; eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; reg_map_write &rArr; eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB &rArr; reg_map_write &rArr; eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; reg_map_write &rArr; eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>eMBInit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_surv_baudrate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[c8]"></a>eMBPoll</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[e3]"></a>eMBRTUInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[34]"></a>eMBRTUReceive</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[33]"></a>eMBRTUSend</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRTUSend &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[31]"></a>eMBRTUStart</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUStart &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[32]"></a>eMBRTUStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUStop &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[e1]"></a>eMBRegHoldingCB</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, mb_cb.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = eMBRegHoldingCB &rArr; reg_map_write &rArr; eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_map_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[ca]"></a>eeprom_compare_read</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, global_var.o(i.eeprom_compare_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_singel_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_tripple_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_reg_read_ee
</UL>

<P><STRONG><a name="[ef]"></a>eeprom_tripple_write</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, global_var.o(i.eeprom_tripple_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_compare_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_map_write
</UL>

<P><STRONG><a name="[46]"></a>fan_com_chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, global_var.o(i.fan_com_chk))
<BR>[Address Reference Count : 1]<UL><LI> global_var.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>get_alarm_bitmap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, alarm_calc.o(i.get_alarm_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanOutError
</UL>

<P><STRONG><a name="[126]"></a>init_load_default</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, global_var.o(i.init_load_default))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
</UL>

<P><STRONG><a name="[f2]"></a>isrMessagePut</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[f4]"></a>isr_mbx_send</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[b3]"></a>led_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(i.led_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_close
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_arbiration
</UL>

<P><STRONG><a name="[b4]"></a>led_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
</UL>

<P><STRONG><a name="[b2]"></a>led_open</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(i.led_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_open
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_arbiration
</UL>

<P><STRONG><a name="[73]"></a>led_toggle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, led.o(i.led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_arbiration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlStatus
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = main &rArr; sys_global_var_init &rArr; init_load_factory_conf &rArr; I2C_EE_BufRead &rArr; I2C_EE_BufRead_bsp &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_i2c_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_dio_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_adc_dma_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFanCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>mb_get_baudrate</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, mb_cb.o(i.mb_get_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mb_get_baudrate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_surv_baudrate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[c5]"></a>mb_get_device_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_cb.o(i.mb_get_device_addr))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_surv_baudrate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[ab]"></a>node_append</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, event_record.o(i.node_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = node_append &rArr; calc_alrarm_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_alrarm_cnt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe
</UL>

<P><STRONG><a name="[ac]"></a>node_delete</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, event_record.o(i.node_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = node_delete &rArr; calc_alrarm_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_alrarm_cnt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe
</UL>

<P><STRONG><a name="[bc]"></a>osDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkg_proc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>osKernelInitialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[4d]"></a>osKernelStart</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[fa]"></a>osPoolAlloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rt_cmsis.o(i.osPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPoolAlloc &rArr; sysPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_append
</UL>

<P><STRONG><a name="[c1]"></a>osPoolCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_cmsis.o(i.osPoolCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osPoolCreate &rArr; svcPoolCreate &rArr; _init_box
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chain_init
</UL>

<P><STRONG><a name="[fb]"></a>osPoolFree</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rt_cmsis.o(i.osPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPoolFree &rArr; sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_delete
</UL>

<P><STRONG><a name="[4c]"></a>osThreadCreate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[42]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[fc]"></a>os_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[41]"></a>os_idle_demon</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[116]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[52]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[e2]"></a>prveMBError2Exception</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[ed]"></a>reg_map_write</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, global_var.o(i.reg_map_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = reg_map_write &rArr; eeprom_tripple_write &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_tripple_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[2d]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm0.o(.emb_text)
</UL>
<P><STRONG><a name="[121]"></a>rt_alloc_mem</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[fd]"></a>rt_block</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[101]"></a>rt_chk_robin</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[103]"></a>rt_dec_dly</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[104]"></a>rt_dispatch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[106]"></a>rt_dly_wait</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[107]"></a>rt_evt_psh</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2e]"></a>rt_free_box</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm0.o(.emb_text)
</UL>
<P><STRONG><a name="[122]"></a>rt_free_mem</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[ff]"></a>rt_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[11e]"></a>rt_init_mem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[114]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[10b]"></a>rt_init_stack</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[f3]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[120]"></a>rt_mbx_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[10c]"></a>rt_mbx_psh</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4f]"></a>rt_pop_req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[f6]"></a>rt_psh_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[f5]"></a>rt_psq_enq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[fe]"></a>rt_put_dly</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[102]"></a>rt_put_prio</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[105]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[110]"></a>rt_resort_prio</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[10d]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[109]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[108]"></a>rt_rmv_dly</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[111]"></a>rt_rmv_list</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[10f]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4e]"></a>rt_stk_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.rt_stk_check))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[100]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[112]"></a>rt_sys_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[115]"></a>rt_sys_start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[50]"></a>rt_systick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[118]"></a>rt_tsk_create</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[119]"></a>rt_tsk_delete</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[11b]"></a>rt_tsk_prio</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[123]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[11c]"></a>save_conf_reg</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, global_var.o(i.save_conf_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = save_conf_reg &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_u16
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
</UL>

<P><STRONG><a name="[11d]"></a>set_load_flag</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, global_var.o(i.set_load_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_load_flag &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
</UL>

<P><STRONG><a name="[38]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[39]"></a>svcKernelInitialize</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[3a]"></a>svcKernelStart</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[11f]"></a>svcMessageCreate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[3c]"></a>svcPoolCreate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcPoolCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcPoolCreate &rArr; _init_box
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osPoolCreate)
</UL>
<P><STRONG><a name="[3e]"></a>svcThreadCreate</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[3f]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[40]"></a>svcThreadTerminate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[3b]"></a>sysPoolAlloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rt_cmsis.o(i.sysPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osPoolAlloc)
</UL>
<P><STRONG><a name="[3d]"></a>sysPoolFree</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.sysPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osPoolFree)
</UL>
<P><STRONG><a name="[117]"></a>sysTimerTick</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[f8]"></a>sys_global_var_init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, global_var.o(i.sys_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sys_global_var_init &rArr; init_load_factory_conf &rArr; I2C_EE_BufRead &rArr; I2C_EE_BufRead_bsp &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_load_flag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_conf_reg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_load_default
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_load_factory_conf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_reg_read_ee
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>sys_set_remap_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_status.o(i.sys_set_remap_status))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_alrarm_cnt
</UL>

<P><STRONG><a name="[12c]"></a>u16GetT2Val</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phasecutting.o(i.u16GetT2Val))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetAcCyc
</UL>

<P><STRONG><a name="[129]"></a>uart1_init</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, uart.o(i.uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_gpio_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[e9]"></a>usMBCRC16</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[71]"></a>vCalPhaseCuttingTime</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, phasecutting.o(i.vCalPhaseCuttingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vCalPhaseCuttingTime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCRON
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCROFF
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanCtrlAlgorithm
</UL>

<P><STRONG><a name="[6d]"></a>vEnablePhaseAngleTiming</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, phasecutting.o(i.vEnablePhaseAngleTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vEnablePhaseAngleTiming &rArr; InitT1 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCRON
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitT1
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>vGetAcCyc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, acfrequency.o(i.vGetAcCyc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vGetAcCyc &rArr; AVGfilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16GetT2Val
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVGfilter
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>vMBPortSerialEnable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[ec]"></a>vMBPortTimersDisable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[eb]"></a>vMBPortTimersEnable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[a0]"></a>vSCRTrigOffCntrl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, phasecutting.o(i.vSCRTrigOffCntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vSCRTrigOffCntrl &rArr; PaSCROFF
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCROFF
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>vSCRTrigOnCntrl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, phasecutting.o(i.vSCRTrigOnCntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vSCRTrigOnCntrl &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaSCRON
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>vUpdateAcCyc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, acfrequency.o(i.vUpdateAcCyc))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>vUpdateExtISRFltTm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, phasecutting.o(i.vUpdateExtISRFltTm))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>xMBPortEventGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[e4]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[e6]"></a>xMBPortEventPost</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[12e]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBPortSerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[e7]"></a>xMBPortSerialInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xMBPortSerialInit &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[130]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBPortSerialPutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[e8]"></a>xMBPortTimersInit</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xMBPortTimersInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[35]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUReceiveFSM &rArr; xMBPortSerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[37]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUTimerT35Expired &rArr; vMBPortTimersDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[36]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xMBRTUTransmitFSM &rArr; vMBPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c9]"></a>conf_reg_read_ee</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, global_var.o(i.conf_reg_read_ee))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = conf_reg_read_ee &rArr; eeprom_compare_read &rArr; eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_compare_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
</UL>

<P><STRONG><a name="[ee]"></a>eeprom_singel_write</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, global_var.o(i.eeprom_singel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = eeprom_singel_write &rArr; I2C_EE_BufWrite &rArr; I2C_EE_BufWrite_bsp &rArr; WriteEEROMPage &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_compare_read
</UL>

<P><STRONG><a name="[f0]"></a>init_load_factory_conf</STRONG> (Thumb, 90 bytes, Stack size 216 bytes, global_var.o(i.init_load_factory_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = init_load_factory_conf &rArr; I2C_EE_BufRead &rArr; I2C_EE_BufRead_bsp &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_u16
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_global_var_init
</UL>

<P><STRONG><a name="[c3]"></a>change_surv_baudrate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, com_proc.o(i.change_surv_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = change_surv_baudrate &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_device_addr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_baudrate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_proc
</UL>

<P><STRONG><a name="[a6]"></a>calc_hi_press_ai</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, daq.o(i.calc_hi_press_ai))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = calc_hi_press_ai &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_sts_update
</UL>

<P><STRONG><a name="[a7]"></a>calc_ntc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, daq.o(i.calc_ntc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calc_ntc &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_sts_update
</UL>

<P><STRONG><a name="[1]"></a>acl00</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, alarm_calc.o(i.acl00))
<BR>[Address Reference Count : 1]<UL><LI> alarm_calc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>acl01</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, alarm_calc.o(i.acl01))
<BR>[Address Reference Count : 1]<UL><LI> alarm_calc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>acl02</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, alarm_calc.o(i.acl02))
<BR>[Address Reference Count : 1]<UL><LI> alarm_calc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>acl03</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alarm_calc.o(i.acl03))
<BR>[Address Reference Count : 1]<UL><LI> alarm_calc.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>alarm_arbiration</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, alarm_calc.o(i.alarm_arbiration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alarm_arbiration &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe_process
</UL>

<P><STRONG><a name="[aa]"></a>alarm_status_bitmap_op</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, alarm_calc.o(i.alarm_status_bitmap_op))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_exe
</UL>

<P><STRONG><a name="[b1]"></a>init_alarm</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, alarm_calc.o(i.init_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_acl_init
</UL>

<P><STRONG><a name="[bd]"></a>calc_alrarm_cnt</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, event_record.o(i.calc_alrarm_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calc_alrarm_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_remap_status
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_delete
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_append
</UL>

<P><STRONG><a name="[127]"></a>uart1_gpio_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, uart.o(i.uart1_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart1_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[7e]"></a>IIC_Read_Byte</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, i2c_bsp.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC_Read_Byte &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
</UL>

<P><STRONG><a name="[85]"></a>IIC_SCL</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c_bsp.o(i.IIC_SCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[87]"></a>IIC_SDA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c_bsp.o(i.IIC_SDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[7b]"></a>IIC_Send_Byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, i2c_bsp.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC_Send_Byte &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
</UL>

<P><STRONG><a name="[7a]"></a>IIC_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c_bsp.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_Start &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
</UL>

<P><STRONG><a name="[7f]"></a>IIC_Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c_bsp.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[7c]"></a>IIC_Wait_Ack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, i2c_bsp.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
</UL>

<P><STRONG><a name="[84]"></a>SDA_IN</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c_bsp.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[86]"></a>SDA_OUT</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c_bsp.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[80]"></a>delay_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_bsp.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEROMPage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufWrite_bsp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufRead_bsp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[9a]"></a>SetSysClock</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[10e]"></a>rt_ms2tick</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_ms2tick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[124]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[125]"></a>rt_timer_insert</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[10a]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
